import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, D as createEventDispatcher, E as onDestroy, F as create_slot, G as update_slot, x as transition_in, y as transition_out, e as element, f as claim_element, g as children, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, H as action_destroyer, C as group_outros, A as check_outros, p as create_component, r as claim_component, u as mount_component, z as destroy_component, a as space, c as claim_space, I as set_style, J as toggle_class, m as append_dev } from './client.428738da.js';

/* node_modules/svelte-waypoint/src/Waypoint.svelte generated by Svelte v3.29.4 */
const file = "node_modules/svelte-waypoint/src/Waypoint.svelte";

// (139:2) {#if visible}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(139:2) {#if visible}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let waypoint_action;
	let current;
	let mounted;
	let dispose;
	let if_block = /*visible*/ ctx[3] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "wrapper " + /*className*/ ctx[2] + " " + /*c*/ ctx[0] + " svelte-142y8oi");
			attr_dev(div, "style", /*style*/ ctx[1]);
			add_location(div, file, 137, 0, 3091);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(waypoint_action = /*waypoint*/ ctx[4].call(null, div));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*visible*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*visible*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*className, c*/ 5 && div_class_value !== (div_class_value = "wrapper " + /*className*/ ctx[2] + " " + /*c*/ ctx[0] + " svelte-142y8oi")) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*style*/ 2) {
				attr_dev(div, "style", /*style*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function throttleFn(fn, time) {
	let last, deferTimer;

	return () => {
		const now = +new Date();

		if (last && now < last + time) {
			// hold on to it
			clearTimeout(deferTimer);

			deferTimer = setTimeout(
				function () {
					last = now;
					fn();
				},
				time
			);
		} else {
			last = now;
			fn();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Waypoint", slots, ['default']);
	const dispatch = createEventDispatcher();
	let { offset = 0 } = $$props;
	let { throttle = 250 } = $$props;
	let { c = "" } = $$props;
	let { style = "" } = $$props;
	let { once = true } = $$props;
	let { threshold = 1 } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let visible = disabled;
	let wasVisible = false;
	let intersecting = false;

	let removeHandlers = () => {
		
	};

	function callEvents(wasVisible, observer, node) {
		if (visible && !wasVisible) {
			dispatch("enter");
			return;
		}

		if (wasVisible && !intersecting) {
			dispatch("leave");
		}

		if (once && wasVisible && !intersecting) {
			removeHandlers();
		}
	}

	function waypoint(node) {
		if (!window || disabled) return;

		if (window.IntersectionObserver && window.IntersectionObserverEntry) {
			const observer = new IntersectionObserver(([{ isIntersecting }]) => {
					wasVisible = visible;
					intersecting = isIntersecting;

					if (wasVisible && once && !isIntersecting) {
						callEvents(wasVisible);
						return;
					}

					$$invalidate(3, visible = isIntersecting);
					callEvents(wasVisible);
				},
			{ rootMargin: offset + "px", threshold });

			observer.observe(node);
			removeHandlers = () => observer.unobserve(node);
			return removeHandlers;
		}

		function checkIsVisible() {
			// Kudos https://github.com/twobin/react-lazyload/blob/master/src/index.jsx#L93
			if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return;

			let top;
			let height;

			try {
				({ top, height } = node.getBoundingClientRect());
			} catch(e) {
				({ top, height } = defaultBoundingClientRect);
			}

			const windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
			wasVisible = visible;
			intersecting = top - offset <= windowInnerHeight && top + height + offset >= 0;

			if (wasVisible && once && !isIntersecting) {
				callEvents(wasVisible, observer);
				return;
			}

			$$invalidate(3, visible = intersecting);
			callEvents(wasVisible);
		}

		checkIsVisible();
		const throttled = throttleFn(checkIsVisible, throttle);
		window.addEventListener("scroll", throttled);
		window.addEventListener("resize", throttled);

		removeHandlers = () => {
			window.removeEventListener("scroll", throttled);
			window.removeEventListener("resize", throttled);
		};

		return removeHandlers;
	}

	const writable_props = ["offset", "throttle", "c", "style", "once", "threshold", "disabled", "class"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Waypoint> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("offset" in $$props) $$invalidate(5, offset = $$props.offset);
		if ("throttle" in $$props) $$invalidate(6, throttle = $$props.throttle);
		if ("c" in $$props) $$invalidate(0, c = $$props.c);
		if ("style" in $$props) $$invalidate(1, style = $$props.style);
		if ("once" in $$props) $$invalidate(7, once = $$props.once);
		if ("threshold" in $$props) $$invalidate(8, threshold = $$props.threshold);
		if ("disabled" in $$props) $$invalidate(9, disabled = $$props.disabled);
		if ("class" in $$props) $$invalidate(2, className = $$props.class);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onDestroy,
		dispatch,
		offset,
		throttle,
		c,
		style,
		once,
		threshold,
		disabled,
		className,
		visible,
		wasVisible,
		intersecting,
		removeHandlers,
		throttleFn,
		callEvents,
		waypoint
	});

	$$self.$inject_state = $$props => {
		if ("offset" in $$props) $$invalidate(5, offset = $$props.offset);
		if ("throttle" in $$props) $$invalidate(6, throttle = $$props.throttle);
		if ("c" in $$props) $$invalidate(0, c = $$props.c);
		if ("style" in $$props) $$invalidate(1, style = $$props.style);
		if ("once" in $$props) $$invalidate(7, once = $$props.once);
		if ("threshold" in $$props) $$invalidate(8, threshold = $$props.threshold);
		if ("disabled" in $$props) $$invalidate(9, disabled = $$props.disabled);
		if ("className" in $$props) $$invalidate(2, className = $$props.className);
		if ("visible" in $$props) $$invalidate(3, visible = $$props.visible);
		if ("wasVisible" in $$props) wasVisible = $$props.wasVisible;
		if ("intersecting" in $$props) intersecting = $$props.intersecting;
		if ("removeHandlers" in $$props) removeHandlers = $$props.removeHandlers;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		c,
		style,
		className,
		visible,
		waypoint,
		offset,
		throttle,
		once,
		threshold,
		disabled,
		$$scope,
		slots
	];
}

class Waypoint extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			offset: 5,
			throttle: 6,
			c: 0,
			style: 1,
			once: 7,
			threshold: 8,
			disabled: 9,
			class: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Waypoint",
			options,
			id: create_fragment.name
		});
	}

	get offset() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set offset(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get throttle() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set throttle(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get c() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set c(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get once() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set once(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get threshold() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set threshold(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-image/src/Image.svelte generated by Svelte v3.29.4 */
const file$1 = "node_modules/svelte-image/src/Image.svelte";

// (65:0) <Waypoint   class="{wrapperClass}"   style="min-height: 100px; width: 100%;"   once   {threshold}   disabled="{!lazy}" >
function create_default_slot(ctx) {
	let div2;
	let div1;
	let div0;
	let t0;
	let img0;
	let img0_class_value;
	let img0_src_value;
	let t1;
	let picture;
	let source0;
	let t2;
	let source1;
	let t3;
	let img1;
	let img1_src_value;
	let img1_class_value;
	let load_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			img0 = element("img");
			t1 = space();
			picture = element("picture");
			source0 = element("source");
			t2 = space();
			source1 = element("source");
			t3 = space();
			img1 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { style: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { style: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			img0 = claim_element(div1_nodes, "IMG", { class: true, src: true, alt: true });
			t1 = claim_space(div1_nodes);
			picture = claim_element(div1_nodes, "PICTURE", {});
			var picture_nodes = children(picture);
			source0 = claim_element(picture_nodes, "SOURCE", { type: true, srcset: true, sizes: true });
			t2 = claim_space(picture_nodes);
			source1 = claim_element(picture_nodes, "SOURCE", { srcset: true, sizes: true });
			t3 = claim_space(picture_nodes);

			img1 = claim_element(picture_nodes, "IMG", {
				src: true,
				class: true,
				alt: true,
				width: true,
				height: true
			});

			picture_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "width", "100%");
			set_style(div0, "padding-bottom", /*ratio*/ ctx[7]);
			add_location(div0, file$1, 73, 6, 1408);
			attr_dev(img0, "class", img0_class_value = "placeholder " + /*placeholderClass*/ ctx[13] + " svelte-a3bmbz");
			if (img0.src !== (img0_src_value = /*src*/ ctx[4])) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", /*alt*/ ctx[1]);
			add_location(img0, file$1, 74, 6, 1469);
			attr_dev(source0, "type", "image/webp");
			attr_dev(source0, "srcset", /*srcsetWebp*/ ctx[6]);
			attr_dev(source0, "sizes", /*sizes*/ ctx[9]);
			add_location(source0, file$1, 76, 8, 1552);
			attr_dev(source1, "srcset", /*srcset*/ ctx[5]);
			attr_dev(source1, "sizes", /*sizes*/ ctx[9]);
			add_location(source1, file$1, 77, 8, 1619);
			if (img1.src !== (img1_src_value = /*src*/ ctx[4])) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "class", img1_class_value = "main " + /*c*/ ctx[0] + " " + /*className*/ ctx[14] + " svelte-a3bmbz");
			attr_dev(img1, "alt", /*alt*/ ctx[1]);
			attr_dev(img1, "width", /*width*/ ctx[2]);
			attr_dev(img1, "height", /*height*/ ctx[3]);
			toggle_class(img1, "blur", /*blur*/ ctx[8]);
			add_location(img1, file$1, 78, 8, 1655);
			add_location(picture, file$1, 75, 6, 1534);
			set_style(div1, "position", "relative");
			set_style(div1, "overflow", "hidden");
			add_location(div1, file$1, 72, 4, 1350);
			set_style(div2, "position", "relative");
			set_style(div2, "width", "100%");
			attr_dev(div2, "class", "svelte-a3bmbz");
			toggle_class(div2, "loaded", /*loaded*/ ctx[15]);
			add_location(div2, file$1, 71, 2, 1286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div1, t0);
			append_dev(div1, img0);
			append_dev(div1, t1);
			append_dev(div1, picture);
			append_dev(picture, source0);
			append_dev(picture, t2);
			append_dev(picture, source1);
			append_dev(picture, t3);
			append_dev(picture, img1);

			if (!mounted) {
				dispose = action_destroyer(load_action = /*load*/ ctx[16].call(null, img1));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*ratio*/ 128) {
				set_style(div0, "padding-bottom", /*ratio*/ ctx[7]);
			}

			if (dirty & /*placeholderClass*/ 8192 && img0_class_value !== (img0_class_value = "placeholder " + /*placeholderClass*/ ctx[13] + " svelte-a3bmbz")) {
				attr_dev(img0, "class", img0_class_value);
			}

			if (dirty & /*src*/ 16 && img0.src !== (img0_src_value = /*src*/ ctx[4])) {
				attr_dev(img0, "src", img0_src_value);
			}

			if (dirty & /*alt*/ 2) {
				attr_dev(img0, "alt", /*alt*/ ctx[1]);
			}

			if (dirty & /*srcsetWebp*/ 64) {
				attr_dev(source0, "srcset", /*srcsetWebp*/ ctx[6]);
			}

			if (dirty & /*sizes*/ 512) {
				attr_dev(source0, "sizes", /*sizes*/ ctx[9]);
			}

			if (dirty & /*srcset*/ 32) {
				attr_dev(source1, "srcset", /*srcset*/ ctx[5]);
			}

			if (dirty & /*sizes*/ 512) {
				attr_dev(source1, "sizes", /*sizes*/ ctx[9]);
			}

			if (dirty & /*src*/ 16 && img1.src !== (img1_src_value = /*src*/ ctx[4])) {
				attr_dev(img1, "src", img1_src_value);
			}

			if (dirty & /*c, className*/ 16385 && img1_class_value !== (img1_class_value = "main " + /*c*/ ctx[0] + " " + /*className*/ ctx[14] + " svelte-a3bmbz")) {
				attr_dev(img1, "class", img1_class_value);
			}

			if (dirty & /*alt*/ 2) {
				attr_dev(img1, "alt", /*alt*/ ctx[1]);
			}

			if (dirty & /*width*/ 4) {
				attr_dev(img1, "width", /*width*/ ctx[2]);
			}

			if (dirty & /*height*/ 8) {
				attr_dev(img1, "height", /*height*/ ctx[3]);
			}

			if (dirty & /*c, className, blur*/ 16641) {
				toggle_class(img1, "blur", /*blur*/ ctx[8]);
			}

			if (dirty & /*loaded*/ 32768) {
				toggle_class(div2, "loaded", /*loaded*/ ctx[15]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(65:0) <Waypoint   class=\\\"{wrapperClass}\\\"   style=\\\"min-height: 100px; width: 100%;\\\"   once   {threshold}   disabled=\\\"{!lazy}\\\" >",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let waypoint;
	let current;

	waypoint = new Waypoint({
			props: {
				class: /*wrapperClass*/ ctx[12],
				style: "min-height: 100px; width: 100%;",
				once: true,
				threshold: /*threshold*/ ctx[10],
				disabled: !/*lazy*/ ctx[11],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(waypoint.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(waypoint.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(waypoint, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const waypoint_changes = {};
			if (dirty & /*wrapperClass*/ 4096) waypoint_changes.class = /*wrapperClass*/ ctx[12];
			if (dirty & /*threshold*/ 1024) waypoint_changes.threshold = /*threshold*/ ctx[10];
			if (dirty & /*lazy*/ 2048) waypoint_changes.disabled = !/*lazy*/ ctx[11];

			if (dirty & /*$$scope, loaded, src, c, className, alt, width, height, blur, srcset, sizes, srcsetWebp, placeholderClass, ratio*/ 189439) {
				waypoint_changes.$$scope = { dirty, ctx };
			}

			waypoint.$set(waypoint_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(waypoint.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(waypoint.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(waypoint, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Image", slots, []);
	let { c = "" } = $$props; // deprecated
	let { alt = "" } = $$props;
	let { width = null } = $$props;
	let { height = null } = $$props;
	let { src = "" } = $$props;
	let { srcset = "" } = $$props;
	let { srcsetWebp = "" } = $$props;
	let { ratio = "100%" } = $$props;
	let { blur = false } = $$props;
	let { sizes = "(max-width: 1000px) 100vw, 1000px" } = $$props;
	let { threshold = 1 } = $$props;
	let { lazy = true } = $$props;
	let { wrapperClass = "" } = $$props;
	let { placeholderClass = "" } = $$props;
	let { class: className = "" } = $$props;
	let loaded = !lazy;

	function load(img) {
		img.onload = () => $$invalidate(15, loaded = true);
	}

	const writable_props = [
		"c",
		"alt",
		"width",
		"height",
		"src",
		"srcset",
		"srcsetWebp",
		"ratio",
		"blur",
		"sizes",
		"threshold",
		"lazy",
		"wrapperClass",
		"placeholderClass",
		"class"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Image> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("c" in $$props) $$invalidate(0, c = $$props.c);
		if ("alt" in $$props) $$invalidate(1, alt = $$props.alt);
		if ("width" in $$props) $$invalidate(2, width = $$props.width);
		if ("height" in $$props) $$invalidate(3, height = $$props.height);
		if ("src" in $$props) $$invalidate(4, src = $$props.src);
		if ("srcset" in $$props) $$invalidate(5, srcset = $$props.srcset);
		if ("srcsetWebp" in $$props) $$invalidate(6, srcsetWebp = $$props.srcsetWebp);
		if ("ratio" in $$props) $$invalidate(7, ratio = $$props.ratio);
		if ("blur" in $$props) $$invalidate(8, blur = $$props.blur);
		if ("sizes" in $$props) $$invalidate(9, sizes = $$props.sizes);
		if ("threshold" in $$props) $$invalidate(10, threshold = $$props.threshold);
		if ("lazy" in $$props) $$invalidate(11, lazy = $$props.lazy);
		if ("wrapperClass" in $$props) $$invalidate(12, wrapperClass = $$props.wrapperClass);
		if ("placeholderClass" in $$props) $$invalidate(13, placeholderClass = $$props.placeholderClass);
		if ("class" in $$props) $$invalidate(14, className = $$props.class);
	};

	$$self.$capture_state = () => ({
		Waypoint,
		c,
		alt,
		width,
		height,
		src,
		srcset,
		srcsetWebp,
		ratio,
		blur,
		sizes,
		threshold,
		lazy,
		wrapperClass,
		placeholderClass,
		className,
		loaded,
		load
	});

	$$self.$inject_state = $$props => {
		if ("c" in $$props) $$invalidate(0, c = $$props.c);
		if ("alt" in $$props) $$invalidate(1, alt = $$props.alt);
		if ("width" in $$props) $$invalidate(2, width = $$props.width);
		if ("height" in $$props) $$invalidate(3, height = $$props.height);
		if ("src" in $$props) $$invalidate(4, src = $$props.src);
		if ("srcset" in $$props) $$invalidate(5, srcset = $$props.srcset);
		if ("srcsetWebp" in $$props) $$invalidate(6, srcsetWebp = $$props.srcsetWebp);
		if ("ratio" in $$props) $$invalidate(7, ratio = $$props.ratio);
		if ("blur" in $$props) $$invalidate(8, blur = $$props.blur);
		if ("sizes" in $$props) $$invalidate(9, sizes = $$props.sizes);
		if ("threshold" in $$props) $$invalidate(10, threshold = $$props.threshold);
		if ("lazy" in $$props) $$invalidate(11, lazy = $$props.lazy);
		if ("wrapperClass" in $$props) $$invalidate(12, wrapperClass = $$props.wrapperClass);
		if ("placeholderClass" in $$props) $$invalidate(13, placeholderClass = $$props.placeholderClass);
		if ("className" in $$props) $$invalidate(14, className = $$props.className);
		if ("loaded" in $$props) $$invalidate(15, loaded = $$props.loaded);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		c,
		alt,
		width,
		height,
		src,
		srcset,
		srcsetWebp,
		ratio,
		blur,
		sizes,
		threshold,
		lazy,
		wrapperClass,
		placeholderClass,
		className,
		loaded,
		load
	];
}

class Image extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			c: 0,
			alt: 1,
			width: 2,
			height: 3,
			src: 4,
			srcset: 5,
			srcsetWebp: 6,
			ratio: 7,
			blur: 8,
			sizes: 9,
			threshold: 10,
			lazy: 11,
			wrapperClass: 12,
			placeholderClass: 13,
			class: 14
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Image",
			options,
			id: create_fragment$1.name
		});
	}

	get c() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set c(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get srcset() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set srcset(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get srcsetWebp() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set srcsetWebp(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ratio() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ratio(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get blur() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set blur(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sizes() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sizes(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get threshold() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set threshold(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lazy() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lazy(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrapperClass() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrapperClass(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholderClass() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholderClass(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Image as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
